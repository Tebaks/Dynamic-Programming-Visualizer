{"version":3,"sources":["logo.svg","DynamicProgrammingVisualizer/Node/Node.jsx","DynamicProgrammingVisualizer/DynamicProgrammingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","this","props","col","row","number","id","className","Component","DynamicProgrammingVisualizer","myChangeHandler","event","setState","money","target","value","console","log","state","grid","isWorking","getInitialGrid","setTimeout","node","document","getElementById","coins","makeZero","x","y","onClick","clear","getNumberOfWays","map","rowIdx","key","nodeIdx","currentRow","push","createNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.adcaa7f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n\r\n    render() {\r\n        const {\r\n            col,\r\n            row,\r\n            number = 0,\r\n        } = this.props;\r\n\r\n\r\n        return (\r\n            <div id={`node-${row}-${col}`}\r\n                className={`node`}>\r\n                <div className=\"text\">\r\n                    {`${number}`}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport './DynamicProgrammingVisualizer.css';\r\n\r\nexport default class DynamicProgrammingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            isWorking: false,\r\n            money: 12,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid(this.state.money);\r\n        this.setState({ grid });\r\n    }\r\n    clear() {\r\n        if (this.state.isWorking !== true) {\r\n            const { grid } = this.state\r\n            const money = this.state.money\r\n            for (let row = 0; row < 5; row++) {\r\n\r\n                for (let col = 0; col < money + 2; col++) {\r\n                    setTimeout(() => {\r\n                        const node = document.getElementById(`node-${grid[row][col].row}-${grid[row][col].col}`)\r\n                        grid[row][col].number = 0;\r\n                        node.className = `node`;\r\n                        this.setState({ grid })\r\n                    }, 50 * col + row * 500)\r\n\r\n                }\r\n            }\r\n            this.setState({ grid })\r\n        }\r\n    }\r\n    makeZero(money) {\r\n        const { grid } = this.state\r\n        for (let row = 0; row < 5; row++) {\r\n\r\n            for (let col = 0; col < money + 2; col++) {\r\n                const node = document.getElementById(`node-${grid[row][col].row}-${grid[row][col].col}`)\r\n                grid[row][col].number = 0;\r\n                node.className = `node`;\r\n\r\n\r\n            }\r\n        }\r\n        this.setState({ grid })\r\n    }\r\n    getNumberOfWays(coins) {\r\n        if (this.state.isWorking !== true) {\r\n            const money = this.state.money\r\n            console.log(money)\r\n            this.setState({ isWorking: true })\r\n            this.makeZero(money)\r\n            const { grid } = this.state\r\n            for (let x = 1; x < 5; x++) {\r\n                setTimeout(() => {\r\n                    grid[x][1].number = 1;\r\n                    document.getElementById(`node-${grid[x][1].row}-${grid[x][1].col}`).className = 'node node-visited';\r\n                    this.setState({ grid })\r\n                }, 100 * x)\r\n\r\n            }\r\n            grid[0][0].number = 0\r\n            document.getElementById(`node-${grid[0][0].row}-${grid[0][0].col}`).className = 'out-node';\r\n            grid[1][0].number = 0\r\n            document.getElementById(`node-${grid[1][0].row}-${grid[1][0].col}`).className = 'out-node';\r\n            for (let x = 2; x < 5; x++) {\r\n                grid[x][0].number = coins[x - 2]\r\n                document.getElementById(`node-${grid[x][0].row}-${grid[x][0].col}`).className = 'out-node';\r\n            }\r\n            for (let y = 1; y < money + 2; y++) {\r\n                grid[0][y].number = y - 1;\r\n                document.getElementById(`node-${grid[0][y].row}-${grid[0][y].col}`).className = 'out-node';\r\n            }\r\n            this.setState({ grid })\r\n\r\n            for (let x = 1; x < 5; x++) {\r\n                for (let y = 1; y < money + 2; y++) {\r\n                    if (x > 1) {\r\n                        if (y - coins[x - 2] < 1) {\r\n                            setTimeout(() => {\r\n                                grid[x][y].number = grid[x - 1][y].number\r\n                                document.getElementById(`node-${grid[x][y].row}-${grid[x][y].col}`).className = 'node node-visited';\r\n                                this.setState({ grid })\r\n                            }, 100 * y + x * money * 100)\r\n\r\n                        } else {\r\n                            setTimeout(() => {\r\n                                grid[x][y].number = grid[x - 1][y].number + grid[x][y - coins[x - 2]].number\r\n                                document.getElementById(`node-${grid[x][y].row}-${grid[x][y].col}`).className = 'node node-visited';\r\n                                this.setState({ grid })\r\n                            }, 100 * y + x * money * 100)\r\n\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (x === 3) {\r\n                    setTimeout(() => {\r\n                        this.setState({ isWorking: false })\r\n                    }, x * money * 150)\r\n                }\r\n            }\r\n\r\n            this.setState({ grid })\r\n\r\n        }\r\n\r\n    }\r\n    myChangeHandler = (event) => {\r\n        this.setState({ money: event.target.value })\r\n        console.log(event.target.value)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { grid } = this.state;\r\n        return (\r\n            <>\r\n                <button onClick={() => this.clear()}>\r\n                    Clear All\r\n                </button>\r\n                <button onClick={() => this.getNumberOfWays([1, 2, 5])}>\r\n                    Find\r\n                </button>\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {\r\n                                    row.map((node, nodeIdx) => {\r\n                                        const { row, col, number } = node;\r\n                                        return (\r\n                                            <Node key={nodeIdx} col={col} row={row} number={number}></Node>\r\n                                        );\r\n                                    })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n}\r\nconst getInitialGrid = (money) => {\r\n    const grid = [];\r\n    for (let row = 0; row < 5; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < money + 2; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        number: 0,\r\n    };\r\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DynamicProgrammingVisualizer from './DynamicProgrammingVisualizer/DynamicProgrammingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DynamicProgrammingVisualizer></DynamicProgrammingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}